'''1. Отсортировать по убыванию методом «пузырька» одномерный целочисленный массив, заданный случайными числами на промежутке [-100; 100).
Вывести на экран исходный и отсортированный массивы.'''
import random

SIZE = 16
mas = [random.randint(-100, 100) for i in range(SIZE)]
'''Идея - иду справа по массиву и каждый новый элемент-пузырек поднимаю/опускаю в рамках рассматриваемого подмассива.
В результате в конце каждого шага получаю отсортированный подмассив все большей длины.
Сложность, как и у обычного пузырька O(n**2), но в абсолютных значениях для массива с урока 57 итераций для сортировки по возрастанию и 63 - по убыванию
Мне кажется, была какая-то теорема о том, что чтобы отсортировать массив при помощи перестановки соседних элементов (т.е. пузырьком),
как ни ухищряйся с алгоритмом, будет нужно одно и то же число перестановок. Так что 57 выглядит правдоподобно)
'''
#mas = [8,13,5,1,2,10,14,11,3,0,12,15,6,4,7,9]
cnt = 0
print(mas)
for i in range(len(mas)):
    j = len(mas) - i - 1
    while j < len(mas) - 1 and mas[j] < mas[j+1]:
        mas[j], mas[j+1] = mas[j+1], mas[j]
        j += 1
        cnt += 1

print(mas, cnt)