'''1. Определение количества различных подстрок с использованием хеш-функции. Пусть дана строка S длиной N.
Например, состоящая только из маленьких латинских букв. Требуется найти количество различных подстрок в этой строке.
Для решения задачи рекомендую воспользоваться алгоритмом sha1 из модуля hashlib или встроенную функцию hash()'''

import hashlib


'''В целом задача решается без явного использования хешей - с помощью множеств (set)
Если использовать хеши явно вместе с set, то это выглядит несколько излишне (т.е. вычисление хеша вроде никак не ускоряет алгоритм)
А как реализовать сравнение подстроки со всеми ранее выбранными подстроками без сильных костылей и без set, я не придумал
'''
def count_subs(str):
    num = 0 #если строка сама является своей подстрокой, то надо инициализировать как num = 1
    for i in range(1,len(str)):
        s = set()
        for j in range(len(str) - i + 1):
            h = hashlib.sha1(str[j:j+i].encode('utf-8')).hexdigest()
            if h not in s:
                num += 1
                s.add(h)
    return num

num = count_subs(input('Введите непустую строку для подсчета подстрок '))
print('В этой строке {} различный подстрок'.format(num))